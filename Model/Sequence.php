<?php
/**
 * Copyright Â© Magecan, Inc. All rights reserved.
 */
namespace Magecan\CustomOrderNumber\Model;

use Magento\Framework\App\ResourceConnection as AppResource;
use Magento\Framework\DB\Sequence\SequenceInterface;
use Magento\SalesSequence\Model\Meta;
use Magento\Framework\App\Config\ScopeConfigInterface as ScopeConfig;

/**
 * Class Sequence represents sequence in logic for generating custom order numbers
 */
class Sequence implements SequenceInterface
{
    /**
     * Default pattern for the sequence with prefix, incremented value, and suffix.
     * %s - Placeholder for prefix
     * %'.09d - Placeholder for incremented value (padded to 9 digits)
     * %s - Placeholder for suffix
     */
    protected const DEFAULT_PATTERN  = "%s%'.09d%s";

    /**
     * Length of the store ID when formatted
     */
    protected const STORE_ID_LENGTH = 2;

    /**
     * Base configuration path for custom order number settings.
     * This is used as the prefix for accessing various configuration values
     * such as the prefix, suffix, sequence step, and start value.
     *
     * Example: 'custom_order_number/{entityType}/{configParameter}'
     *
     * @var string
     */
    protected const CONFIG_PATH_PREFIX = 'custom_order_number/';

    /**
     * Entity type for the sequence (e.g., order, invoice)
     *
     * @var string
     */
    private $entityType;

    /**
     * Store ID associated with the sequence
     *
     * @var int
     */
    private $storeId;

    /**
     * Last incremented ID generated by the sequence
     *
     * @var string|null
     */
    private $lastIncrementId;

    /**
     * Start value for the sequence
     *
     * @var int
     */
    private $startValue;

    /**
     * Step value for the sequence (incremental step)
     *
     * @var int
     */
    private $step;

    /**
     * @var Meta
     */
    private $meta;

    /**
     * Database connection for the sequence
     *
     * @var false|\Magento\Framework\DB\Adapter\AdapterInterface
     */
    private $connection;

    /**
     * Scope config interface for retrieving configuration values
     *
     * @var \Magento\Framework\App\Config\ScopeConfigInterface
     */
    private $scopeConfig;

    /**
     * Sequence constructor.
     *
     * @param Meta $meta Meta data for the sequence (entity type, store ID)
     * @param AppResource $resource Resource connection for database operations
     * @param ScopeConfig $scopeConfig Scope config to retrieve custom sequence configurations
     */
    public function __construct(
        Meta $meta,
        AppResource $resource,
        ScopeConfig $scopeConfig
    ) {
        $this->meta = $meta;
        $this->connection = $resource->getConnection('sales');
        $this->scopeConfig = $scopeConfig;
        $this->entityType = $meta->getEntityType();
        $this->storeId = $meta->getStoreId();
    }

    /**
     * Retrieve the custom prefix for the sequence based on configuration
     *
     * @return string Generated prefix for the sequence
     */
    protected function getPrefix()
    {
        return $this->generateFormattedString('prefix');
    }

    /**
     * Retrieve the custom suffix for the sequence based on configuration
     *
     * @return string Generated suffix for the sequence
     */
    protected function getSuffix()
    {
        return $this->generateFormattedString('suffix');
    }

    /**
     * Retrieve the step value for the sequence from configuration
     *
     * @return int Step value used to increment the sequence
     */
    protected function getStep()
    {
        if ($this->step === null) {
            $this->step = (int) $this->scopeConfig->getValue(
                self::CONFIG_PATH_PREFIX . $this->entityType . '/sequence_step',
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE
            );
        }
        return $this->step;
    }

    /**
     * Retrieve the starting value for the sequence from configuration
     *
     * @return int Starting value of the sequence
     */
    protected function getStartValue()
    {
        if ($this->startValue === null) {
            $this->startValue = (int) $this->scopeConfig->getValue(
                self::CONFIG_PATH_PREFIX . $this->entityType . '/sequence_start_value',
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE
            );
        }
        return $this->startValue;
    }

    /**
     * Retrieve the current sequence value formatted with the prefix, increment, and suffix
     *
     * @return string|null Formatted sequence value or null if not set
     */
    public function getCurrentValue()
    {
        if (!isset($this->lastIncrementId)) {
            return null;
        }

        return sprintf(
            self::DEFAULT_PATTERN,
            $this->getPrefix(),
            $this->calculateCurrentValue(),
            $this->getSuffix()
        );
    }

    /**
     * Retrieve the next value in the sequence, inserting it into the database
     *
     * @return string Formatted sequence value
     */
    public function getNextValue()
    {
        $this->connection->insert($this->meta->getSequenceTable(), []);
        $this->lastIncrementId = $this->connection->lastInsertId($this->meta->getSequenceTable());

        if ($this->lastIncrementId < $this->getStartValue()) {
            $this->lastIncrementId = $this->getStartValue();
            $this->connection->insert($this->meta->getSequenceTable(), ['sequence_value' => $this->lastIncrementId]);
        }

        return $this->getCurrentValue();
    }

    /**
     * Calculate the current sequence value based on the last incremented ID
     *
     * @return int Calculated current sequence value
     */
    private function calculateCurrentValue()
    {
        return ($this->lastIncrementId - $this->getStartValue()) * $this->getStep() + $this->getStartValue();
    }

    /**
     * Generate a formatted string (prefix or suffix) based on a JSON pattern
     *
     * @param string $type The type of value to retrieve ('prefix' or 'suffix')
     * @return string Generated formatted string
     */
    private function generateFormattedString($type)
    {
        $configPath = self::CONFIG_PATH_PREFIX . $this->entityType . '/' . $type;
        $jsonString = $this->scopeConfig->getValue($configPath, \Magento\Store\Model\ScopeInterface::SCOPE_STORE);

        $jsonObj = json_decode($jsonString);
        if (json_last_error() !== JSON_ERROR_NONE) {
            return '';
        }

        $string = '';
        foreach ($jsonObj as $item) {
            switch ($item->type) {
                case 'fixed_string':
                    $string .= $item->value;
                    break;
                case 'yyyy':
                    $string .= date('Y');
                    break;
                case 'mm':
                    $string .= date('m');
                    break;
                case 'dd':
                    $string .= date('d');
                    break;
                case 'store_id':
                    $string .= str_pad($this->storeId, self::STORE_ID_LENGTH, '0', STR_PAD_LEFT);
                    break;
                default:
                    break;
            }
        }

        return $string;
    }
}
